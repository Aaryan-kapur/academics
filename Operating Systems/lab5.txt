#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>
void q1(){

    int bt[20],p[20],wt[20],tat[20],pr[20],i,j,n,total=0,pos,temp,avg_wt,avg_tat;
    printf("Enter Total Number of Process:");
    scanf("%d",&n);
 
    printf("\nEnter Burst Time and Priority\n");
    for(i=0;i<n;i++)
    {
        printf("\nP[%d]\n",i+1);
        printf("Burst Time:");
        scanf("%d",&bt[i]);
        printf("Priority:");
        scanf("%d",&pr[i]);
        p[i]=i+1;        
    }
 

    for(i=0;i<n;i++)
    {
        pos=i;
        for(j=i+1;j<n;j++)
        {
            if(pr[j]<pr[pos])
                pos=j;
        }
 
        temp=pr[i];
        pr[i]=pr[pos];
        pr[pos]=temp;
 
        temp=bt[i];
        bt[i]=bt[pos];
        bt[pos]=temp;
 
        temp=p[i];
        p[i]=p[pos];
        p[pos]=temp;
    }
 
    wt[0]=0;
 

    for(i=1;i<n;i++)
    {
        wt[i]=0;
        for(j=0;j<i;j++)
            wt[i]+=bt[j];
 
        total+=wt[i];
    }
 
    avg_wt=total/n; 
    total=0;
 
    printf("\nProcess\t    Burst Time    \tWaiting Time\tTurnaround Time");
    for(i=0;i<n;i++)
    {
        tat[i]=bt[i]+wt[i];      
        total+=tat[i];
        printf("\nP[%d]\t\t  %d\t\t    %d\t\t\t%d",p[i],bt[i],wt[i],tat[i]);
    }
    avg_tat=total/n;   
    printf("\n\nAverage Waiting Time=%d",avg_wt);
    printf("\nAverage Turnaround Time=%d\n",avg_tat);
 
	// return 0;
}
 struct process
{
      char process_name;
      int arrival_time, burst_time, ct, waiting_time, turnaround_time, priority;
      int status;
}p[8];

int limit;
void q2(){
  int i, time = 0, burst_time = 0, largest;
      char c;

      float wait_time = 0, turnaround_time = 0, average_waiting_time, average_turnaround_time;
      printf("\nEnter Total Number of Processes:\t");
      scanf("%d", &limit);
      for(i = 0, c = '1'; i < limit; i++, c++)
      {
            p[i].process_name = c;
            printf("\nEnter Details For Process[%C]:\n", p[i].process_name);
            printf("Enter Arrival Time:\t");
            scanf("%d", &p[i].arrival_time );
            printf("Enter Burst Time:\t");
            scanf("%d", &p[i].burst_time);
            printf("Enter Priority:\t");
            scanf("%d", &p[i].priority);
            p[i].status = 0;
            burst_time = burst_time + p[i].burst_time;
      }
      void Arrival_Time_Sorting();
      p[9].priority = -9999;
      printf("\nProcess Name\tArrival Time\tBurst Time\tPriority\tWaiting Time");
      for(time = p[0].arrival_time; time < burst_time;)
      {
            largest = 9;
            for(i = 0; i < limit; i++)
            {
                  if(p[i].arrival_time <= time && p[i].status != 1 && p[i].priority > p[largest].priority)
                  {
                        largest = i;
                  }
            }
            time = time + p[largest].burst_time;
            p[largest].ct = time;
            p[largest].waiting_time = p[largest].ct - p[largest].arrival_time - p[largest].burst_time;
            p[largest].turnaround_time = p[largest].ct - p[largest].arrival_time;
            p[largest].status = 1;
            wait_time = wait_time + p[largest].waiting_time;
            turnaround_time = turnaround_time + p[largest].turnaround_time;
            printf("\n%c\t\t\t\t%d\t\t\t\t%d\t\t\t%d\t\t\t%d", p[largest].process_name, p[largest].arrival_time, p[largest].burst_time, p[largest].priority, p[largest].waiting_time);
      }
      average_waiting_time = wait_time / limit;
      average_turnaround_time = turnaround_time / limit;
      printf("\n\nAverage waiting time:\t%f\n", average_waiting_time);
      printf("Average Turnaround Time:\t%f\n", average_turnaround_time);
};
void Arrival_Time_Sorting()
{
      struct process temp;
      int i, j;
      for(i = 0; i < limit - 1; i++)
      {
            for(j = i + 1; j < limit; j++)
            {
                  if(p[i].arrival_time > p[j].arrival_time)
                  {
                        temp = p[i];
                        p[i] = p[j];
                        p[j] = temp;
                  }
            }
      }
}


int main(void) {
q2();
return 0;
}