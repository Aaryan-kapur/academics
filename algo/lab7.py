# -*- coding: utf-8 -*-
"""lab assignment -7.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1PIzzAfk2tjkHDFiavEZf81CkEI-gNb5w
"""

# Question 1
def power(a,n):
    if(n == 0): return 1
    if(a == 0): return 0
    if(n%2 == 0): return power(a*a, n//2)
    else: return a * power(a*a, n//2);
a,n = 6,33
print(power(a,n))
print(a**n)

# Question 2
import sys
def count1(arr,i,j):
    if(i==j):return 0
    sup = sys.maxsize 
    for k in range(i,j):
        count=count1(arr,i,k)+count1(arr,k+1,j)+(arr[i-1]*arr[k]*arr[j])
        if(count<sup):sup=count
    return sup
arr=[1,2,3,4,2]
print(count1(arr,1,len(arr)-1))

# Question 3
time_consume=[[3,3,5,7,9,10,14,16],[4,4,6,5,11,6,15,22]]
switch_time=[[2,1,3,3,2,1,3,3,2],[2,1,2,2,3,2,4,3,1]]
def self1(t,s):
    # take any sublist of above given array
    i=len(time_consume[0])
    path1_time=[0 for k in range(i)]
    path2_time=[0 for k in range(i)]
    #Initial time of both paths
    path1_time[0]=time_consume[0][0]+switch_time[0][0]
    path2_time[0]=time_consume[1][0]+switch_time[1][0]
    for l in range(1,i):
        path1_time[l]=min(path1_time[l-1]+time_consume[0][l],path2_time[l-1]+switch_time[1][l]+time_consume[0][l])
        path2_time[l]=min(path2_time[l-1]+time_consume[1][l],path1_time[l-1]+switch_time[0][l]+time_consume[1][l])
    a=path1_time[i-1]
    b=path2_time[i-1]
    return(min(a,b))
print(self1(time_consume,switch_time))